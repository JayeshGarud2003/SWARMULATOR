# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SwarmUITest.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets,uic
from PyQt5.QtWidgets import * 
from fileMain import PageWindow
import pandas as pd
from PyQt5.QtCore import QSize, Qt, pyqtSlot, pyqtSignal
from PyQt5.QtWidgets import (QApplication, QMainWindow, QPushButton, QTableWidget, QTableWidgetItem,
                             QFileDialog, QVBoxLayout, QWidget, QDialog, QLabel, QLineEdit, QComboBox, QCheckBox, QHBoxLayout)

# Custom TableWidget class
class TableWidget(QTableWidget):
    def __init__(self, df, parent=None):
        super().__init__(parent)
        self.load_df(df)

    def load_df(self, df, selected_columns=[]):
        self.df = df
        if self.df is not None:
            self.init_table(selected_columns)
        else:
            print("DataFrame is None, cannot initialize table.")

    def init_table(self, selected_columns=[]):
        nRows = len(self.df.index)
        nColumns = len(selected_columns) or len(self.df.columns)
        self.setRowCount(nRows)
        self.setColumnCount(nColumns)

        if self.df.empty:
            self.clearContents()
            return

        self.setHorizontalHeaderLabels(selected_columns or self.df.columns)
        self.setVerticalHeaderLabels(self.df.index.astype(str))

        for row in range(self.rowCount()):
            for col in range(self.columnCount()):
                item = QTableWidgetItem(str(self.df.iat[row, col]))
                self.setItem(row, col, item)

        self.setSortingEnabled(True)
        self.horizontalHeader().setSectionsMovable(True)


class AggregateStatsModel(QtCore.QAbstractTableModel):
    def __init__(self, data, parent=None):
        super(AggregateStatsModel, self).__init__(parent)
        self.data = data
        self.headers = data.columns.tolist()
        self.row_labels = data.index.tolist()

    def rowCount(self, parent=QtCore.QModelIndex()):
        return len(self.row_labels)

    def columnCount(self, parent=QtCore.QModelIndex()):
        return len(self.headers)

    def data(self, index, role=QtCore.Qt.DisplayRole):
        if role == QtCore.Qt.DisplayRole:
            return str(self.data.iloc[index.row(), index.column()])
        return None

    def headerData(self, section, orientation, role=QtCore.Qt.DisplayRole):
        if role == QtCore.Qt.DisplayRole:
            if orientation == QtCore.Qt.Horizontal:
                return str(self.headers[section])
            elif orientation == QtCore.Qt.Vertical:
                return str(self.row_labels[section])
        return None


# class Ui_MainWindow(QMainWindow):
class Dashboard(PageWindow):
    def __init__(self):
        super(Dashboard,self).__init__()
        self.setupUi(self)
        # self.browse_2.clicked.connect(self.goto_MyApp)


    def setupUi(self, MainWindow):
        self.df = pd.DataFrame()
        MainWindow.setWindowTitle("SWARMULATOR")
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1908, 920)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("*{\n"
                "border:none;\n"
                "background-color:transparent;\n"
                "padding:0;\n"
                "margin:0;\n"
                "color:#fff;\n"
                "}\n"
                "\n"
                "#centralwidget{\n"
                "background-color:#1f232a;\n"
                "}\n"
                "\n"
                "\n"
                "\n"
                "\n"
                "\n"
                "\n"
                "\n"
                "\n"
                "\n"
                "\n"
                "#leftmenusubcontainer{\n"
                "background-color:#16191d;\n"
                "}\n"
                "\n"
                "#leftmenusubcontainer QPushButton{\n"
                "\n"
                "padding:5px 10px;\n"
                "border-top-left-radius:10px;\n"
                "border-bottom-left-radius:10px;\n"
                "}\n"
                "\n"
                "#headercontainer{\n"
                "background-color:#2c313c;\n"
                "}\n"
                "\n"
                "#frame_6{\n"
                "padding:5px;\n"
                "}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.mainbodycontainer = QtWidgets.QWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mainbodycontainer.sizePolicy().hasHeightForWidth())
        self.mainbodycontainer.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.mainbodycontainer.setFont(font)
        self.mainbodycontainer.setObjectName("mainbodycontainer")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.mainbodycontainer)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.mainbodycontainer_2 = QtWidgets.QWidget(self.mainbodycontainer)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mainbodycontainer_2.sizePolicy().hasHeightForWidth())
        self.mainbodycontainer_2.setSizePolicy(sizePolicy)
        self.mainbodycontainer_2.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.mainbodycontainer_2.setObjectName("mainbodycontainer_2")
        self.browse = QtWidgets.QPushButton(self.mainbodycontainer_2)
        self.browse.setGeometry(QtCore.QRect(790, 140, 231, 71))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.browse.setFont(font)
        self.browse.setStyleSheet("QPushButton {\n"
                "  border: 1.5px solid #2707de;\n"
                "  border-radius: 5px;  /* Optional: Add rounded corners */\n"
                "  padding: 1px 5\n"
                "px;  /* Optional: Adjust padding for button text */\n"
                "}")
        self.browse.setObjectName("browse")
        self.listWidget = QtWidgets.QListWidget(self.mainbodycontainer_2)
        self.listWidget.setGeometry(QtCore.QRect(160, 320, 541, 261))
        self.listWidget.setStyleSheet("QListWidget {\n"
                "  border: 1px solid #2707de;  /* Adjust color and width as needed */\n"
                "  border-radius: 5px;\n"
                "  font-size: 12pt;          /* Optional: Add rounded corners */\n"
                "}")
        self.listWidget.setObjectName("listWidget")
        self.widget = QtWidgets.QWidget(self.mainbodycontainer_2)
        self.widget.setGeometry(QtCore.QRect(-20, 0, 1931, 81))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setStyleSheet("QWidget{\n"
                "background-color:#131519;\n"
                "}")
        self.widget.setObjectName("widget")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(790, 10, 431, 51))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.widget_4 = QtWidgets.QWidget(self.widget)
        self.widget_4.setGeometry(QtCore.QRect(0, 0, 91, 1291))
        self.widget_4.setStyleSheet("QWidget{\n"
                "background-color:#131519;\n"
                "}")
        self.widget_4.setObjectName("widget_4")
        self.info = QtWidgets.QTableView(self.mainbodycontainer_2)
        self.info.setGeometry(QtCore.QRect(160, 640, 541, 251))
        self.info.setStyleSheet("QTableView\n"
                " {\n"
                "  border: 1px solid #2707de;  /* Adjust color and width as needed */\n"
                "  border-radius: 5px;          /* Optional: Add rounded corners */\n"
                "}\n"
                "QHeaderView::section { background-color: black; }\n"
                "QHeaderView::section { background-color: black; }")
        self.info.setObjectName("info")
        self.browse_2 = QtWidgets.QPushButton(self.mainbodycontainer_2)
        self.browse_2.setGeometry(QtCore.QRect(1150, 820, 151, 71))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.browse_2.setFont(font)
        self.browse_2.setStyleSheet("QPushButton {\n"
                "  border: 1.5px solid #2707de;\n"
                "  border-radius: 5px;  /* Optional: Add rounded corners */\n"
                "  padding: 1px 5\n"
                "px;  /* Optional: Adjust padding for button text */\n"
                "}")
        self.browse_2.setObjectName("browse_2")
        self.widget_2 = QtWidgets.QWidget(self.mainbodycontainer_2)
        self.widget_2.setGeometry(QtCore.QRect(0, -20, 71, 1211))
        self.widget_2.setStyleSheet("QWidget{\n"
                "background-color:#131519;\n"
                "}")
        self.widget_2.setObjectName("widget_2")
        self.widget_3 = QtWidgets.QWidget(self.mainbodycontainer_2)
        self.widget_3.setGeometry(QtCore.QRect(1830, 0, 101, 1311))
        self.widget_3.setStyleSheet("QWidget{\n"
                "background-color:#131519;\n"
                "}")
        self.widget_3.setObjectName("widget_3")
        self.label_2 = QtWidgets.QLabel(self.mainbodycontainer_2)
        self.label_2.setGeometry(QtCore.QRect(290, 130, 401, 71))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.mainbodycontainer_2)
        self.label_3.setGeometry(QtCore.QRect(790, 265, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.mainbodycontainer_2)
        self.label_4.setGeometry(QtCore.QRect(160, 270, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.describe = TableWidget(self.df,self.mainbodycontainer_2)
        self.describe.setGeometry(QtCore.QRect(795, 331, 791, 381))
        self.describe.setStyleSheet("QTableWidget {\n"
                "  border: 1px solid #2707de;\n"
                "  border-radius: 5px;\n"
                "  margin: 2px;                 /* Add some margin to separate border from content */\n"
                " color:white;\n"

                "}"
                
                "QHeaderView::section { background-color: black; }")
           # Set the color of the scrollbar handle
        self.describe.verticalScrollBar().setStyleSheet("QScrollBar::handle:vertical { background-color: #; }")   #32353c
        self.describe.horizontalScrollBar().setStyleSheet("QScrollBar::handle:horizontal { background-color: #; }")
        
        self.describe.verticalScrollBar().setStyleSheet("QScrollBar:vertical { background-color: #; }")   #2f343d
            # Set the color of the horizontal scrollbar
        self.describe.horizontalScrollBar().setStyleSheet("QScrollBar:horizontal { background-color: #; }")   #2f343d
        self.describe.setObjectName("describe")
        self.describe.setColumnCount(0)
        self.describe.setRowCount(0)
        self.label_5 = QtWidgets.QLabel(self.mainbodycontainer_2)
        self.label_5.setGeometry(QtCore.QRect(160, 600, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_6.addWidget(self.mainbodycontainer_2)
        self.horizontalLayout.addWidget(self.mainbodycontainer)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1908, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.shape = QtWidgets.QLabel(self.centralwidget)
        self.shape.setGeometry(QtCore.QRect(1290, 248, 401, 71))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Condensed")
        font.setPointSize(12)
        self.shape.setFont(font)
        self.shape.setObjectName("shape")
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.browse.clicked.connect(self.open_file)
        self.browse_2.clicked.connect(self.goto_MyApp)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SWARMULATOR"))
        self.browse.setText(_translate("MainWindow", "Upload Dataset"))
        self.label.setText(_translate("MainWindow", " SWARMULATOR"))
        self.browse_2.setText(_translate("MainWindow", "Next"))
        self.label_2.setText(_translate("MainWindow", "Select Your Dataset :"))
        self.shape.setText(_translate("MainWindow", "Shape: "))
        self.label_3.setText(_translate("MainWindow", "Selected Dataset :"))
        self.label_4.setText(_translate("MainWindow", "Columns :"))
        self.label_5.setText(_translate("MainWindow", "Aggregate Data:"))
        

        
    def goto_MyApp(self):
        self.goto('next')


    def open_file(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_name, _ = QFileDialog.getOpenFileName(self.centralwidget, "Open File", "", "CSV Files (*.csv);;Excel Files (*.xlsx *.xls);;All files (*.*)", options=options)
        if file_name:
            if file_name.endswith(('.xlsx', '.xls')):
                self.df = pd.read_excel(file_name, sheet_name=0)
            else:
                self.df = pd.read_csv(file_name)
            self.describe.load_df(self.df)

            # shape_text = self.df.shape
            # shape = f"Shape: {shape[0]} rows, {shape[1]} columns"
            shape_text = f"Shape: {self.df.shape}"
            self.shape.setText(shape_text)
            

            if file_name:
                    if file_name.endswith(('.xlsx', '.xls')):
                        self.df = pd.read_excel(file_name, sheet_name=0)
                    else:
                        self.df = pd.read_csv(file_name)
                    self.describe.load_df(self.df)
                    aggregate_stats = self.calculate_aggregate_stats()
                    self.display_aggregate_stats(aggregate_stats)
            self.update_column_list()
            


    def calculate_aggregate_stats(self):
        aggregate_stats = self.df.describe(include='all')
        aggregate_stats['count'] = self.df.count()
        aggregate_stats['sum'] = self.df.sum()
        aggregate_stats['mean'] = self.df.mean()
        aggregate_stats['median'] = self.df.median()
        aggregate_stats['mode'] = self.df.mode().iloc[0]
        aggregate_stats['std'] = self.df.std()
        aggregate_stats['var'] = self.df.var()
        aggregate_stats['min'] = self.df.min()
        aggregate_stats['max'] = self.df.max()
        return aggregate_stats

    def display_aggregate_stats(self, aggregate_stats):
        model = AggregateStatsModel(aggregate_stats)
        self.info.setModel(model)

    def update_column_list(self):
    # Clear existing items from the column list widget
        self.listWidget.clear()

        # Get column names and data types from the DataFrame
        column_names = self.df.columns.tolist()
        data_types = self.df.dtypes.astype(str).tolist()

        # Add items to the column list widget (name and type)
        for i, (name, dtype) in enumerate(zip(column_names, data_types)):
            item_text = f"{name} ............... ({dtype})"
            self.listWidget.addItem(item_text)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Dashboard()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
